PartType promoter;
PartType terminator;
PartType cds;
PartType rbs;
PartType ribozyme;

cds AmeR;
cds AmtR;
cds BM3R1;
cds BetI;
cds HlyIIR;
cds PhlF;
cds SrpR;
promoter pAmeR;
promoter pAmtR;
promoter pBAD;
promoter pBM3R1;
promoter pBetI;
promoter pHlyIIR;
promoter pSrpR;
promoter pTac;
promoter pTet;
rbs A1;
rbs B3;
rbs E1;
rbs F1;
rbs H1;
rbs P3;
rbs S4;
ribozyme BydvJ;
ribozyme RiboJ10;
ribozyme RiboJ51;
ribozyme RiboJ53;
ribozyme RiboJ54;
ribozyme RiboJ57;
ribozyme SarJ;
terminator ECK120029600;
terminator ECK120033736;
terminator ECK120033737;
terminator L3S2P11;
terminator L3S2P55;
terminator L3S3P11;
terminator L3S3P31;

Device HlyIIR_device(
   promoter,
   promoter,
   RiboJ51,
   H1,
   HlyIIR,
   ECK120033736
);
Device BetI_device(
   promoter,
   promoter,
   RiboJ57,
   E1,
   BetI,
   L3S3P11
);
Device SrpR_device(
   promoter,
   promoter,
   RiboJ10,
   S4,
   SrpR,
   ECK120029600
);
Device AmeR_device(
   promoter,
   promoter,
   RiboJ54,
   F1,
   AmeR,
   L3S3P31
);
Device AmtR_device(
   promoter,
   BydvJ,
   A1,
   AmtR,
   L3S2P55
);
Device PhlF_device(
   promoter,
   promoter,
   RiboJ53,
   P3,
   PhlF,
   ECK120033737
);
Device BM3R1_device(
   promoter,
   SarJ,
   B3,
   BM3R1,
   L3S2P11
);

Rule HlyIIR_rules ( ON HlyIIR_device:
   CONTAINS pAmtR AND
   CONTAINS pBM3R1 AND
   ALL_FORWARD
);
Rule BetI_rules ( ON BetI_device:
   CONTAINS pHlyIIR AND
   CONTAINS pAmeR AND
   ALL_FORWARD
);
Rule SrpR_rules ( ON SrpR_device:
   CONTAINS pBM3R1 AND
   CONTAINS pTet AND
   ALL_FORWARD
);
Rule AmeR_rules ( ON AmeR_device:
   CONTAINS pTac AND
   CONTAINS pTet AND
   ALL_FORWARD
);
Rule AmtR_rules ( ON AmtR_device:
   CONTAINS pTac AND
   ALL_FORWARD
);
Rule PhlF_rules ( ON PhlF_device:
   CONTAINS pBetI AND
   CONTAINS pSrpR AND
   ALL_FORWARD
);
Rule BM3R1_rules ( ON BM3R1_device:
   CONTAINS pBAD AND
   ALL_FORWARD
);


HlyIIR_devices  = product(HlyIIR_device);
BetI_devices    = product(BetI_device);
SrpR_devices    = product(SrpR_device);
AmeR_devices    = product(AmeR_device);
AmtR_devices    = product(AmtR_device);
PhlF_devices    = product(PhlF_device);
BM3R1_devices   = product(BM3R1_device);

Device gate_HlyIIR();
Device gate_BetI();
Device gate_SrpR();
Device gate_AmeR();
Device gate_AmtR();
Device gate_PhlF();
Device gate_BM3R1();

Device circuit();

Rule allRules( ON circuit:
   gate_HlyIIR  EXACTLY 1 AND
   gate_BetI    EXACTLY 1 AND
   gate_SrpR    EXACTLY 1 AND
   gate_AmeR    EXACTLY 1 AND
   gate_AmtR    EXACTLY 1 AND
   gate_BM3R1   EXACTLY 1 AND
   gate_PhlF    EXACTLY 1 AND
   ALL_FORWARD
);

Array allResults;

for(num i1=0;  i1<sizeof(HlyIIR_devices);  i1=i1+1) {
for(num i2=0;  i2<sizeof(BetI_devices);    i2=i2+1) {
for(num i3=0;  i3<sizeof(SrpR_devices);    i3=i3+1) {
for(num i4=0;  i4<sizeof(AmeR_devices);    i4=i4+1) {
for(num i5=0;  i5<sizeof(AmtR_devices);    i5=i5+1) {
for(num i6=0;  i6<sizeof(PhlF_devices);    i6=i6+1) {
for(num i7=0;  i7<sizeof(BM3R1_devices);   i7=i7+1) {

gate_HlyIIR  = HlyIIR_devices[i1];
gate_BetI    = BetI_devices[i2];
gate_SrpR    = SrpR_devices[i3];
gate_AmeR    = AmeR_devices[i4];
gate_AmtR    = AmtR_devices[i5];
gate_PhlF    = PhlF_devices[i6];
gate_BM3R1   = BM3R1_devices[i7];

Device circuit(
   gate_HlyIIR,
   gate_BetI,
   gate_SrpR,
   gate_AmeR,
   gate_AmtR,
   gate_BM3R1,
   gate_PhlF
);

result = permute(circuit);

allResults = allResults + result;

}
}
}
}
}
}
}
println(sizeof(allResults));